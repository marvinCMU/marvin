#include "facedetectionizer.hpp"
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <image_transport/image_transport.h>
#include <compressed_image_transport/compressed_subscriber.h>
#include <sensor_msgs/image_encodings.h>
#include <cv_bridge/cv_bridge.h>
#include <cv_bridge/CvBridge.h>
#include <opencv/cv.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <sstream>

ros::Publisher namePub;
ros::Subscriber faceCmd;
char key='i';
string label;
bool faceFound = false;
Mat face, rotatedFace;
Rect pos;
bool detectFace=false;
bool recognizeFace=false;
bool takeData=false;
bool updateModel=false;
bool eyesDetected=false;
int width = 200;
int height = -1; //calculate

IplImage* iplImg=NULL;


string cascadeName = FACE_CASCADE_DEFAULT_PATH;
string leftEyeCascade = L_EYE_CASCADE_DEFAULT_PATH;
string rightEyeCascade = R_EYE_CASCADE_DEFAULT_PATH;

Mat frame, frameCopy, image;
string inputName;
double scale = 1;
string dataPath = DATA_DEFAULT_PATH;
ofstream outstr;
string modelPath = MODEL_DEFAULT_PATH;
bool suppressVideo = false;
bool loocv = false;
bool daemonMode = false;
string recoType= "LBPH";

FaceDetector faceDetector(cascadeName, leftEyeCascade, rightEyeCascade);
//FaceRecognizerWLabels model(recoType);

ros::Publisher face_detection_bb_publisher;
image_transport::Publisher face_detection_image_publisher;

void detect_face(){


  std_msgs::String bb_msg;
  bb_msg.data = "no face";
  string label = "NULL";


  if( iplImg != NULL ){
    //IplImage* iplImg = cvQueryFrame( capture );
    frame = iplImg;
    if( frame.empty() )
      return;
    if( iplImg->origin == IPL_ORIGIN_TL )
      frame.copyTo( frameCopy );
    else
      flip( frame, frameCopy, 0 );


    faceFound = faceDetector.GetCenterFace(frameCopy, face, pos, scale,200,300);

    if (faceFound)
      {
	eyesDetected= faceDetector.StandardizeFaceWithEyes(frameCopy, pos, face, width,height);
	cout << "eyesDetected=" << eyesDetected << endl << flush;
	IplImage face_ipl = face;
	sensor_msgs::ImagePtr face_img_msg = sensor_msgs::CvBridge::cvToImgMsg( &face_ipl, "bgr8" );
	std::stringstream ss;
	ss << pos.x << "\n" << pos.y << "\n" << pos.width << "\n" <<pos.height << "\n"<<
	  width <<"\n" << height << std::endl;
	bb_msg.data = ss.str();
	
	face_detection_image_publisher.publish( face_img_msg );
      }
  }

  face_detection_bb_publisher.publish( bb_msg );
	
}

void faces_left_callback( const std_msgs::String::ConstPtr& msg ){
  if(strcmp( msg->data.c_str(), "true" ) == 0 ){
    detect_face();
  }
}

void detect_face_callback( const sensor_msgs::ImageConstPtr& msg ){
  sensor_msgs::CvBridge bridge;
  iplImg = bridge.imgMsgToCv(msg, "bgr8");
  detect_face();
}


int main( int argc, char** argv )
{

  ros::init( argc, argv, "face_detector");
  ros::NodeHandle nh;

  image_transport::ImageTransport it( nh );
  image_transport::Subscriber sub = it.subscribe( "gui/image_raw", 5, detect_face_callback );
  
  face_detection_bb_publisher = nh.advertise<std_msgs::String>( "face/face_detection_result/bounding_box", 1000 );
  face_detection_image_publisher = it.advertise( "face/face_detection_result/image", 5 );

  ros::Subscriber faces_left_subscriber = nh.subscribe( "face/face_train/faces_left", 1000, faces_left_callback );

  //model.Load( modelPath.c_str() );

  cvNamedWindow( "result", 1 );

  ros::spin();

  cvDestroyWindow( "result" );

  return 0;
}


  
    /*
    if (takeData)
      {
	if (faceFound)
	  {
	    faceDetector.SaveFace(face,label);
	  }
      }
    if (recognizeFace)
      if (faceFound)
	{
	  label = model.Predict(face);
	  cv::putText(frameCopy,label,cv::Point(pos.x,pos.y+pos.height),cv::FONT_HERSHEY_PLAIN,1.0,cv::Scalar(255,255,255,0));
	}


    if (!suppressVideo)
      {
	cv::imshow("result", frameCopy);
	if (eyesDetected)
	  cv::imshow("face", face);

	waitKey(1);
      }

  }

  if( label.compare("NULL") != 0  &&
      label.compare("unknown_index") != 0 ){
    std_msgs::String msg;
    msg.data = label;
    face_reco_pub.publish( msg );
  }
    */

