#include "facedetectionizer.hpp"
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <image_transport/image_transport.h>
#include <compressed_image_transport/compressed_subscriber.h>
#include <sensor_msgs/image_encodings.h>
#include <cv_bridge/cv_bridge.h>
#include <cv_bridge/CvBridge.h>
#include <opencv/cv.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <sstream>

ros::Subscriber faceCmd;
char key='i';
string label;
bool faceFound = false;
Mat face, rotatedFace;
Rect pos;
bool detectFace=false;
bool recognizeFace=false;
bool takeData=false;
bool updateModel=false;
bool eyesDetected=false;
int width = 200;
int height = -1; //calculate

IplImage* iplImg=NULL;


string cascadeName = FACE_CASCADE_DEFAULT_PATH;
string leftEyeCascade = L_EYE_CASCADE_DEFAULT_PATH;
string rightEyeCascade = R_EYE_CASCADE_DEFAULT_PATH;

Mat frame, frameCopy, image;
string inputName;
double scale = 1;
string dataPath = DATA_DEFAULT_PATH;
ofstream outstr;
string modelPath = MODEL_DEFAULT_PATH;
bool suppressVideo = false;
bool loocv = false;
bool daemonMode = false;
string recoType= "LBPH";

FaceDetector faceDetector(cascadeName, leftEyeCascade, rightEyeCascade);
FaceRecognizerWLabels model(recoType);

ros::Publisher recognition_label_publisher;

/*
void bb_parser_callback( const std_msgs::String::ConstPtr& msg){
  std::istringstream ss( msg->data.c_str() );
  
  std::string line;
  std::getline( ss, line );  pos.x = atoi( line.c_str() );
  std::getline( ss, line );  pos.y = atoi( line.c_str() );
  std::getline( ss, line );  pos.width = atoi( line.c_str() );
  std::getline( ss, line );  pos.height = atoi( line.c_str() );
  std::getline( ss, line );  width = atoi( line.c_str() );
  std::getline( ss, line );  height = atoi( line.c_str() );

  }*/

void recognize_face_callback( const sensor_msgs::ImageConstPtr& msg ){
  recognizeFace= true;
  sensor_msgs::CvBridge bridge;
  std_msgs::String recognition_msg;
  iplImg = bridge.imgMsgToCv(msg, "bgr8");
  string label = "NULL";

  if( iplImg != NULL ){
    face = iplImg;
    label = model.Predict(face);
    recognition_msg.data = label;
  }

}



int main( int argc, char** argv )
{

  ros::init( argc, argv, "face_detector");
  ros::NodeHandle nh;

  image_transport::ImageTransport it(nh);
  image_transport::Subscriber imgSub = it.subscribe("face/face_detection_result/image",
						    5, recognize_face_callback ) ;
  //ros::Subscriber bbSub = nh.subscribe( "face/face_detection_result/bounding_box", 1000, bb_parser_callback );
  
  recognition_label_publisher = nh.advertise< std_msgs::String >( "face/face_recognition_result", 1000 );
  model.Load( modelPath.c_str() );

  ros::spin();

  return 0;
}
