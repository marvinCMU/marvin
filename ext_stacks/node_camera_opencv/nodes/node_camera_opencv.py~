#!/usr/bin/env python
#This node reads images from the camera and emits the image over ros
import roslib
roslib.load_manifest('node_camera_opencv')
import sys
import rospy
import cv, cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class node_camera_opencv:

  def __init__(self):
    self.image_pub = rospy.Publisher("image_topic",Image)

    cv.NamedWindow("Image window", 1)
    self.bridge = CvBridge()
    #TODO: Pass camera index as a parameter:
    print('Creating capture object...\n')
    capture = cv2.VideoCapture(0)

  def publish_image(self):
      #    try:
      #      cv_image = self.bridge.imgmsg_to_cv(data, "bgr8")
      #    except CvBridgeError, e:
      #      print e

    cv_image = capture.read()
    cv2.imshow('Image', cv_image)

    print ('.')
    try:
      self.image_pub.publish(self.bridge.cv_to_imgmsg(cv_image, "bgr8"))
    except CvBridgeError, e:
      print e

def main(args):
  print('Starting up...\n')
  ic = node_camera_opencv()
#  rospy.init_node('node_camera_opencv', anonymous=True)
  try:
    #    rospy.spin()
    ic.publish_image()
  except KeyboardInterrupt:
    print "Shutting down"
  cv.DestroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
